services:
  jore4-ui:
    build:
      context: ".."

  jore4-hasura:
    # locking hasura image so that we can develop the UI against a static graphql API
    # Link to available jore4-hasura imags in Docker Hub:
    # https://hub.docker.com/r/hsldevcom/jore4-hasura/tags?page=1&ordering=last_updated
    # The :hsl-tag contains the desired version of hsl specific hasura.
    # Waiting for merging feature-branch to main in hasura-repo
    image: &hasura-image 'hsldevcom/jore4-hasura:hsl-main--20231002-3137fa8d6d9d86b6054136347c58aa20544648e0'
    # Waiting for database to be ready to avoid startup delay due to hasura crashing at startup if db is offline
    # Note: this should only be done in development setups as Kubernetes does not allow waiting for services to be ready
    depends_on:
      jore4-testdb:
        condition: service_healthy

  jore4-mapmatching:
    # pinning map-matching API to compatible version
    image: "hsldevcom/jore4-map-matching:main--20221208-d904fbdf9be5eba7e119943e2259c7a74b9dbab9"

  jore4-hastus:
    # pinning hastus import-export-microservice version
    image: "hsldevcom/jore4-hastus:main--20230915-f960161fc377ef33d838075fa0391b5eb4076d9f"
    environment:
      # use the same Hasura URL that the UI uses to enable routing requests to correct Hasura instances
      # when running e2e tests in parallel
      HASURA_URL: "http://host.docker.internal:3300/api/graphql/v1/graphql"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  jore4-timetablesapi:
    # pinning timetables api
    image: "hsldevcom/jore4-timetables-api:main--20231005-6ee56403d3a50f37c07bcc4a66356bb83c70e033"

  jore4-hasura-e2e1:
    image: *hasura-image
    depends_on:
      jore4-testdb-e2e1:
        condition: service_healthy

  jore4-hasura-e2e2:
    image: *hasura-image
    depends_on:
      jore4-testdb-e2e2:
        condition: service_healthy

  jore4-hasura-e2e3:
    image: *hasura-image
    depends_on:
      jore4-testdb-e2e3:
        condition: service_healthy
